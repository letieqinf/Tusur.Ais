// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Tusur.Ais.Data;

#nullable disable

namespace Tusur.Ais.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231122131048_migr1")]
    partial class migr1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Tusur.Ais.Data.Entities.Applications.Application", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("Tusur.Ais.Data.Entities.Applications.Contract", b =>
                {
                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContactFaceId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Number")
                        .HasColumnType("text");

                    b.Property<Guid>("SignatoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uuid");

                    b.HasKey("ApplicationId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ContactFaceId");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("SignatoryId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Contracts");
                });

            modelBuilder.Entity("Tusur.Ais.Data.Entities.Applications.Proxy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<Guid>("SignatoryId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("SignatoryId");

                    b.ToTable("Proxies");
                });

            modelBuilder.Entity("Tusur.Ais.Data.Entities.Applications.Signatory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Patronymic")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Signatories");
                });

            modelBuilder.Entity("Tusur.Ais.Data.Entities.CompanyStructure.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DirectorLastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DirectorName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DirectorPatronymic")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Inn")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Inn")
                        .IsUnique();

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("Tusur.Ais.Data.Entities.CompanyStructure.ContactFace", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Patronymic")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("ContactFaces");
                });

            modelBuilder.Entity("Tusur.Ais.Data.Entities.IntergroupRelations.PracticeApplication", b =>
                {
                    b.Property<Guid>("PracticeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("PracticeId", "ApplicationId", "Type");

                    b.HasIndex("ApplicationId");

                    b.ToTable("PracticeApplications");
                });

            modelBuilder.Entity("Tusur.Ais.Data.Entities.IntergroupRelations.StudentApplication", b =>
                {
                    b.Property<Guid>("StudentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uuid");

                    b.HasKey("StudentId", "ApplicationId");

                    b.HasIndex("ApplicationId");

                    b.ToTable("StudentApplications");
                });

            modelBuilder.Entity("Tusur.Ais.Data.Entities.IntergroupRelations.StudentGroup", b =>
                {
                    b.Property<Guid>("StudentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.HasKey("StudentId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("StudentGroups");
                });

            modelBuilder.Entity("Tusur.Ais.Data.Entities.IntergroupRelations.TeacherDepartment", b =>
                {
                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uuid");

                    b.HasKey("TeacherId", "DepartmentId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("TeacherDepartments");
                });

            modelBuilder.Entity("Tusur.Ais.Data.Entities.UniversityStructure.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("FacultyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FacultyName", "Name")
                        .IsUnique();

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("Tusur.Ais.Data.Entities.UniversityStructure.Faculty", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Name");

                    b.ToTable("Faculties");
                });

            modelBuilder.Entity("Tusur.Ais.Data.Entities.UniversityStructure.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("RecruitmentYearId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("RecruitmentYearId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("Tusur.Ais.Data.Entities.UniversityStructure.Practice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("PracticeTypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RecruitmentYearId")
                        .HasColumnType("uuid");

                    b.Property<string>("Semester")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PracticeTypeId");

                    b.HasIndex("RecruitmentYearId", "PracticeTypeId", "Semester")
                        .IsUnique();

                    b.ToTable("Practices");
                });

            modelBuilder.Entity("Tusur.Ais.Data.Entities.UniversityStructure.PracticeKind", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Name");

                    b.ToTable("PracticeKinds");
                });

            modelBuilder.Entity("Tusur.Ais.Data.Entities.UniversityStructure.PracticePeriod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("PracticeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("PracticeId", "StartDate")
                        .IsUnique();

                    b.ToTable("PracticePeriods");
                });

            modelBuilder.Entity("Tusur.Ais.Data.Entities.UniversityStructure.PracticeType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PracticeKindName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PracticeKindName", "Name")
                        .IsUnique();

                    b.ToTable("PracticeTypes");
                });

            modelBuilder.Entity("Tusur.Ais.Data.Entities.UniversityStructure.RecruitmentYear", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("StudyPlanId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Year")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("StudyPlanId");

                    b.HasIndex("Year")
                        .IsUnique();

                    b.ToTable("RecruitmentYears");
                });

            modelBuilder.Entity("Tusur.Ais.Data.Entities.UniversityStructure.StudyField", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Name");

                    b.ToTable("StudyFields");
                });

            modelBuilder.Entity("Tusur.Ais.Data.Entities.UniversityStructure.StudyPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("FacultyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Form")
                        .HasColumnType("integer");

                    b.Property<Guid>("StudyProfileId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FacultyName");

                    b.HasIndex("StudyProfileId", "FacultyName", "Form")
                        .IsUnique();

                    b.ToTable("StudyPlans");
                });

            modelBuilder.Entity("Tusur.Ais.Data.Entities.UniversityStructure.StudyProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StudyFieldName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("StudyFieldName", "Name")
                        .IsUnique();

                    b.ToTable("StudyProfiles");
                });

            modelBuilder.Entity("Tusur.Ais.Data.Entities.Users.EducationDepartment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("EducationDepartments");
                });

            modelBuilder.Entity("Tusur.Ais.Data.Entities.Users.Secretary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Secretaries");
                });

            modelBuilder.Entity("Tusur.Ais.Data.Entities.Users.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Students");
                });

            modelBuilder.Entity("Tusur.Ais.Data.Entities.Users.Teacher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("Tusur.Ais.Data.Entities.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("Patronymic")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Tusur.Ais.Data.Entities.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Tusur.Ais.Data.Entities.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tusur.Ais.Data.Entities.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Tusur.Ais.Data.Entities.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Tusur.Ais.Data.Entities.Applications.Contract", b =>
                {
                    b.HasOne("Tusur.Ais.Data.Entities.Applications.Application", "Application")
                        .WithOne("Contract")
                        .HasForeignKey("Tusur.Ais.Data.Entities.Applications.Contract", "ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tusur.Ais.Data.Entities.CompanyStructure.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tusur.Ais.Data.Entities.CompanyStructure.ContactFace", "ContactFace")
                        .WithMany()
                        .HasForeignKey("ContactFaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tusur.Ais.Data.Entities.Applications.Signatory", "Signatory")
                        .WithMany()
                        .HasForeignKey("SignatoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tusur.Ais.Data.Entities.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Company");

                    b.Navigation("ContactFace");

                    b.Navigation("Signatory");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Tusur.Ais.Data.Entities.Applications.Proxy", b =>
                {
                    b.HasOne("Tusur.Ais.Data.Entities.Applications.Signatory", "Signatory")
                        .WithMany()
                        .HasForeignKey("SignatoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Signatory");
                });

            modelBuilder.Entity("Tusur.Ais.Data.Entities.CompanyStructure.ContactFace", b =>
                {
                    b.HasOne("Tusur.Ais.Data.Entities.CompanyStructure.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Tusur.Ais.Data.Entities.IntergroupRelations.PracticeApplication", b =>
                {
                    b.HasOne("Tusur.Ais.Data.Entities.Applications.Application", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tusur.Ais.Data.Entities.UniversityStructure.Practice", "Practice")
                        .WithMany()
                        .HasForeignKey("PracticeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Practice");
                });

            modelBuilder.Entity("Tusur.Ais.Data.Entities.IntergroupRelations.StudentApplication", b =>
                {
                    b.HasOne("Tusur.Ais.Data.Entities.Applications.Application", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tusur.Ais.Data.Entities.Users.User", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Tusur.Ais.Data.Entities.IntergroupRelations.StudentGroup", b =>
                {
                    b.HasOne("Tusur.Ais.Data.Entities.UniversityStructure.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tusur.Ais.Data.Entities.Users.User", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Tusur.Ais.Data.Entities.IntergroupRelations.TeacherDepartment", b =>
                {
                    b.HasOne("Tusur.Ais.Data.Entities.UniversityStructure.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tusur.Ais.Data.Entities.Users.User", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Tusur.Ais.Data.Entities.UniversityStructure.Department", b =>
                {
                    b.HasOne("Tusur.Ais.Data.Entities.UniversityStructure.Faculty", "Faculty")
                        .WithMany()
                        .HasForeignKey("FacultyName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Faculty");
                });

            modelBuilder.Entity("Tusur.Ais.Data.Entities.UniversityStructure.Group", b =>
                {
                    b.HasOne("Tusur.Ais.Data.Entities.UniversityStructure.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tusur.Ais.Data.Entities.UniversityStructure.RecruitmentYear", "RecruitmentYear")
                        .WithMany()
                        .HasForeignKey("RecruitmentYearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("RecruitmentYear");
                });

            modelBuilder.Entity("Tusur.Ais.Data.Entities.UniversityStructure.Practice", b =>
                {
                    b.HasOne("Tusur.Ais.Data.Entities.UniversityStructure.PracticeType", "PracticeType")
                        .WithMany()
                        .HasForeignKey("PracticeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tusur.Ais.Data.Entities.UniversityStructure.RecruitmentYear", "RecruitmentYear")
                        .WithMany()
                        .HasForeignKey("RecruitmentYearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PracticeType");

                    b.Navigation("RecruitmentYear");
                });

            modelBuilder.Entity("Tusur.Ais.Data.Entities.UniversityStructure.PracticePeriod", b =>
                {
                    b.HasOne("Tusur.Ais.Data.Entities.UniversityStructure.Practice", "Practice")
                        .WithMany()
                        .HasForeignKey("PracticeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Practice");
                });

            modelBuilder.Entity("Tusur.Ais.Data.Entities.UniversityStructure.PracticeType", b =>
                {
                    b.HasOne("Tusur.Ais.Data.Entities.UniversityStructure.PracticeKind", "PracticeKind")
                        .WithMany()
                        .HasForeignKey("PracticeKindName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PracticeKind");
                });

            modelBuilder.Entity("Tusur.Ais.Data.Entities.UniversityStructure.RecruitmentYear", b =>
                {
                    b.HasOne("Tusur.Ais.Data.Entities.UniversityStructure.StudyPlan", "StudyPlan")
                        .WithMany()
                        .HasForeignKey("StudyPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StudyPlan");
                });

            modelBuilder.Entity("Tusur.Ais.Data.Entities.UniversityStructure.StudyPlan", b =>
                {
                    b.HasOne("Tusur.Ais.Data.Entities.UniversityStructure.Faculty", "Faculty")
                        .WithMany()
                        .HasForeignKey("FacultyName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tusur.Ais.Data.Entities.UniversityStructure.StudyProfile", "StudyProfile")
                        .WithMany()
                        .HasForeignKey("StudyProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Faculty");

                    b.Navigation("StudyProfile");
                });

            modelBuilder.Entity("Tusur.Ais.Data.Entities.UniversityStructure.StudyProfile", b =>
                {
                    b.HasOne("Tusur.Ais.Data.Entities.UniversityStructure.StudyField", "StudyField")
                        .WithMany()
                        .HasForeignKey("StudyFieldName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StudyField");
                });

            modelBuilder.Entity("Tusur.Ais.Data.Entities.Users.EducationDepartment", b =>
                {
                    b.HasOne("Tusur.Ais.Data.Entities.Users.User", "User")
                        .WithOne("EducationDepartment")
                        .HasForeignKey("Tusur.Ais.Data.Entities.Users.EducationDepartment", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Tusur.Ais.Data.Entities.Users.Secretary", b =>
                {
                    b.HasOne("Tusur.Ais.Data.Entities.Users.User", "User")
                        .WithOne("Secretary")
                        .HasForeignKey("Tusur.Ais.Data.Entities.Users.Secretary", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Tusur.Ais.Data.Entities.Users.Student", b =>
                {
                    b.HasOne("Tusur.Ais.Data.Entities.Users.User", "User")
                        .WithOne("Student")
                        .HasForeignKey("Tusur.Ais.Data.Entities.Users.Student", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Tusur.Ais.Data.Entities.Users.Teacher", b =>
                {
                    b.HasOne("Tusur.Ais.Data.Entities.Users.User", "User")
                        .WithOne("Teacher")
                        .HasForeignKey("Tusur.Ais.Data.Entities.Users.Teacher", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Tusur.Ais.Data.Entities.Applications.Application", b =>
                {
                    b.Navigation("Contract");
                });

            modelBuilder.Entity("Tusur.Ais.Data.Entities.Users.User", b =>
                {
                    b.Navigation("EducationDepartment");

                    b.Navigation("Secretary");

                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });
#pragma warning restore 612, 618
        }
    }
}
